{"filter":false,"title":"isSubTree.py","tooltip":"/CodeFights/isSubTree.py","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":27,"column":0},"action":"insert","lines":["#","# Definition for binary tree:","# class Tree(object):","#   def __init__(self, x):","#     self.value = x","#     self.left = None","#     self.right = None","from collections import deque","","def isSameTree(t1, t2):","    if(t1 == None and t2 == None):","        return True","    if(t1 == None or t2 == None):","        return False","    if(t1.value == t2.value):","        return isSameTree(t1.left, t2.left) and isSameTree(t1.right, t2.right)","    else:","        return False","","def isSubtree(t1, t2):","    if(t1 == None and t2 == None):","        return True","    if(t2 == None):","        return True","    if(t1 == None):","        return False","    return isSameTree(t1, t2) or isSubtree(t1.left, t2) or isSubtree(t1.right, t2)",""],"id":1}],[{"start":{"row":6,"column":23},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":7,"column":0},"end":{"row":8,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":8,"column":0},"end":{"row":8,"column":304},"action":"insert","lines":["Given two binary trees t1 and t2, determine whether the second one is a subtree of the first one. A subtree for vertex v in binary tree t is a tree consisting of v and all its descendants in t. Your task is to check whether there is a vertex v in tree t1 such that a subtree for vertex v in t1 equals t2."],"id":4}],[{"start":{"row":8,"column":304},"end":{"row":8,"column":305},"action":"insert","lines":[" "],"id":5}],[{"start":{"row":8,"column":305},"end":{"row":8,"column":307},"action":"insert","lines":["''"],"id":6}],[{"start":{"row":8,"column":307},"end":{"row":8,"column":308},"action":"insert","lines":["'"],"id":7}],[{"start":{"row":7,"column":0},"end":{"row":7,"column":2},"action":"insert","lines":["''"],"id":8}],[{"start":{"row":7,"column":2},"end":{"row":7,"column":3},"action":"insert","lines":["'"],"id":9}],[{"start":{"row":8,"column":98},"end":{"row":9,"column":0},"action":"insert","lines":["",""],"id":10}],[{"start":{"row":9,"column":95},"end":{"row":9,"column":96},"action":"remove","lines":[" "],"id":11},{"start":{"row":9,"column":95},"end":{"row":10,"column":0},"action":"insert","lines":["",""]}],[{"start":{"row":11,"column":0},"end":{"row":12,"column":0},"action":"insert","lines":["",""],"id":12}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":12,"column":0},"end":{"row":12,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1500058402669,"hash":"f25f63c8bfef7612ff5968ec6d798a6c0c68f3bb"}