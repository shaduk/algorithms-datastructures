{"changed":true,"filter":false,"title":"flower.cpp","tooltip":"/flower.cpp","value":"#include <iostream>\n#include <vector>\n#include <algorithm>\n#include <cmath>\n\nusing namespace std;\n\nint findNearest(int numbers[],bool used[],int idx,int cases)\n{\n    int minIndex = -1;\n    int min = *std::max_element(numbers,numbers+cases) - *std::min_element(numbers,numbers+cases);\n    for(int i =0;i < cases;i++)\n    {\n        if(i==idx)\n        continue;\n        if(used[i]==1)\n        continue;\n        int diff = std::abs(numbers[idx] - numbers[i]);\n        if(diff < min)\n        {\n            min = diff;\n            minIndex = i;\n        }\n    }\n    return minIndex;\n}\n\nint sum()\n\nint main()\n{\n    int cases;\n    cin >> cases;\n    int numbers[cases],par[cases];\n    bool used[50] = {0};\n    int left=0,right=cases-1;\n    \n    if(cases%2!=0)\n    {\n        cout << \"The no of entries is odd\";\n    }\n    for(int i=0;i<cases;i++)\n    {\n        cin >> numbers[i];\n        \n    }\n    std::sort(numbers,numbers + cases);\n    \n    \n    for(int i=0;i<cases;i++)\n    {\n        if(used[i])\n        continue;\n        int j = findNearest(numbers,used,i,cases);\n        used[i] =1;\n        used[j]=1;\n        \n    }\n    \n    \n}\n","undoManager":{"mark":-1,"position":-1,"stack":[]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":0,"column":0},"end":{"row":0,"column":0},"isBackwards":true},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1441710293000}