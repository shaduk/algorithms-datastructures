{"filter":false,"title":"cityandcampers.cpp","tooltip":"/hackerearth/cityandcampers.cpp","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":74,"column":0},"action":"insert","lines":["#include <iostream>","#include <set>","using namespace std;","","","void initialize(int Camp[], int Size[], int N)","{","\tfor(int i = 1; i <= N; i++)","\t{","\t\tCamp[i] = i;","\t}","\t","\tfor(int i = 1; i <= N; i++)","\t{","\t\tSize[i] = 1;","\t}","}","","int root(int Camp[], int i)","{","\twhile(Camp[i] != i)","\t{","\t\ti = Camp[i];","\t}","\treturn i;","}","","void weightedunion(int Camp[], int Size[], int a, int b)","{","\tint roota = root(Camp, a);","\tint rootb = root(Camp, b);","\tif(Size[roota] < Size[rootb])","\t{","\t\tCamp[roota] = Camp[rootb];","\t\tSize[rootb] += Size[roota]; ","\t}","\telse","\t{","\t\tCamp[rootb] = Camp[roota];","\t\tSize[roota] += Size[rootb]; ","\t}","\t","}","","bool find(int Camp[], int a, int b)","{","\treturn root(Camp, a) == root(Camp, b);","}","","int main()","{","    int N, Q;","    cin >> N >> Q;","  ","    int Camp[N+1], Size[N+1];","    initialize(Camp, Size, N);","    for(int i = 0; i < Q; i++)","    {","    \tint a, b;","    \tcin >> a >> b;","    \tif(find(Camp, a, b))","    \t{","    \t\t","    \t}","    \telse","    \t{","    \t\t","    \t\tweightedunion(Camp, Size, a, b);","    \t\t","    \t}","    }","    ","    ","}",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":74,"column":0},"end":{"row":74,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1456255106206,"hash":"b37f88cbb700dd754b54277efa19ec102f85f175"}