{"changed":true,"filter":false,"title":"chandu.cpp","tooltip":"/hackerearth/chandu.cpp","value":"/* Chandu is very fond of strings. (Or so he thinks!) But, he does not like strings which have same consecutive letters. No one has any idea why it is so. He calls these strings as Bad strings. So, Good strings are the strings which do not have same consecutive letters. Now, the problem is quite simple. Given a string S, you need to convert it into a Good String.\n\nYou simply need to perform one operation - if there are two same consecutive letters, delete one of them.\n\nInput:\nThe first line contains an integer T, denoting the number of test cases.\nEach test case consists of a string S, which consists of only lower case letters.\n\nOutput:\nFor each test case, print the answer to the given problem.\n\nConstraints:\n1 <= T <= 10\n1 <= |S| <= 30\n\nSample Input(Plaintext Link)\n 3\nabb\naaab\nababa\nSample Output(Plaintext Link)\n ab\nab\nababa */\n\n#include <iostream>\n#include <string>\nusing namespace std;\n\nint main()\n{\n    int testcases;\n    cin >> testcases;\n    while(testcases--)\n    {\n    \tstring input,output=\"\";\n    \tcin >> input;\n    \tfor(int i = 0; i < input.size(); i++)\n    \t{\n    \t\tif(i == 0)\n    \t\t{\n    \t\t\toutput = output + input[i];\n    \t\t}\n    \t\telse if(input[i] != input[i-1])\n    \t\t{\n    \t\t\toutput = output+input[i];\n    \t\t}\n    \t\t\n    \t\n    \t}\n    \tcout << output;\n    \tcout << \"\\n\";\n    }\n}\n","undoManager":{"mark":29,"position":42,"stack":[[{"start":{"row":0,"column":0},"end":{"row":22,"column":0},"action":"insert","lines":["#include <iostream>","#include <string>","using namespace std;","","int main()","{","    int testcases;","    while(testcases--)","    {","    \tstring input,output=\"\";","    \tcin >> input;","    \tfor(int i = 1; i < input.length(); i++)","    \t{","    \t\tif(input[i] != input[i-1])","    \t\t{","    \t\t\toutput = output+input[i-1];","    \t\t}","    \t","    \t}","    \tcout << output;","    }","}",""],"id":1}],[{"start":{"row":11,"column":35},"end":{"row":11,"column":36},"action":"remove","lines":["h"],"id":2}],[{"start":{"row":11,"column":34},"end":{"row":11,"column":35},"action":"remove","lines":["t"],"id":3}],[{"start":{"row":11,"column":33},"end":{"row":11,"column":34},"action":"remove","lines":["g"],"id":4}],[{"start":{"row":11,"column":32},"end":{"row":11,"column":33},"action":"remove","lines":["n"],"id":5}],[{"start":{"row":11,"column":31},"end":{"row":11,"column":32},"action":"remove","lines":["e"],"id":6}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":31},"action":"remove","lines":["l"],"id":7}],[{"start":{"row":11,"column":30},"end":{"row":11,"column":31},"action":"insert","lines":["s"],"id":8}],[{"start":{"row":11,"column":31},"end":{"row":11,"column":32},"action":"insert","lines":["i"],"id":9}],[{"start":{"row":11,"column":32},"end":{"row":11,"column":33},"action":"insert","lines":["z"],"id":10}],[{"start":{"row":11,"column":33},"end":{"row":11,"column":34},"action":"insert","lines":["e"],"id":11}],[{"start":{"row":6,"column":18},"end":{"row":7,"column":0},"action":"insert","lines":["",""],"id":12},{"start":{"row":7,"column":0},"end":{"row":7,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":7,"column":4},"end":{"row":7,"column":5},"action":"insert","lines":["c"],"id":13}],[{"start":{"row":7,"column":5},"end":{"row":7,"column":6},"action":"insert","lines":["i"],"id":14}],[{"start":{"row":7,"column":6},"end":{"row":7,"column":7},"action":"insert","lines":["n"],"id":15}],[{"start":{"row":7,"column":7},"end":{"row":7,"column":8},"action":"insert","lines":[" "],"id":16}],[{"start":{"row":7,"column":8},"end":{"row":7,"column":9},"action":"insert","lines":[">"],"id":17}],[{"start":{"row":7,"column":9},"end":{"row":7,"column":10},"action":"insert","lines":[">"],"id":18}],[{"start":{"row":7,"column":10},"end":{"row":7,"column":11},"action":"insert","lines":[" "],"id":19}],[{"start":{"row":7,"column":11},"end":{"row":7,"column":12},"action":"insert","lines":["t"],"id":20}],[{"start":{"row":7,"column":12},"end":{"row":7,"column":13},"action":"insert","lines":["e"],"id":21}],[{"start":{"row":7,"column":13},"end":{"row":7,"column":14},"action":"insert","lines":["s"],"id":22}],[{"start":{"row":7,"column":14},"end":{"row":7,"column":15},"action":"insert","lines":["t"],"id":23}],[{"start":{"row":7,"column":15},"end":{"row":7,"column":16},"action":"insert","lines":["c"],"id":24}],[{"start":{"row":7,"column":16},"end":{"row":7,"column":17},"action":"insert","lines":["a"],"id":25}],[{"start":{"row":7,"column":17},"end":{"row":7,"column":18},"action":"insert","lines":["s"],"id":26}],[{"start":{"row":7,"column":18},"end":{"row":7,"column":19},"action":"insert","lines":["e"],"id":27}],[{"start":{"row":7,"column":19},"end":{"row":7,"column":20},"action":"insert","lines":["s"],"id":28}],[{"start":{"row":7,"column":20},"end":{"row":7,"column":21},"action":"insert","lines":[";"],"id":29}],[{"start":{"row":0,"column":0},"end":{"row":23,"column":0},"action":"remove","lines":["#include <iostream>","#include <string>","using namespace std;","","int main()","{","    int testcases;","    cin >> testcases;","    while(testcases--)","    {","    \tstring input,output=\"\";","    \tcin >> input;","    \tfor(int i = 1; i < input.size(); i++)","    \t{","    \t\tif(input[i] != input[i-1])","    \t\t{","    \t\t\toutput = output+input[i-1];","    \t\t}","    \t","    \t}","    \tcout << output;","    }","}",""],"id":30},{"start":{"row":0,"column":0},"end":{"row":29,"column":0},"action":"insert","lines":["#include <iostream>","#include <string>","using namespace std;","","int main()","{","    int testcases;","    cin >> testcases;","    while(testcases--)","    {","    \tstring input,output=\"\";","    \tcin >> input;","    \tfor(int i = 0; i < input.size(); i++)","    \t{","    \t\tif(i == 0)","    \t\t{","    \t\t\toutput = output + input[i];","    \t\t}","    \t\telse if(input[i] != input[i-1])","    \t\t{","    \t\t\toutput = output+input[i];","    \t\t}","    \t\t","    \t","    \t}","    \tcout << output;","    \tcout << \"\\n\";","    }","}",""]}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":31}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":32}],[{"start":{"row":0,"column":0},"end":{"row":23,"column":5},"action":"insert","lines":["Chandu is very fond of strings. (Or so he thinks!) But, he does not like strings which have same consecutive letters. No one has any idea why it is so. He calls these strings as Bad strings. So, Good strings are the strings which do not have same consecutive letters. Now, the problem is quite simple. Given a string S, you need to convert it into a Good String.","","You simply need to perform one operation - if there are two same consecutive letters, delete one of them.","","Input:","The first line contains an integer T, denoting the number of test cases.","Each test case consists of a string S, which consists of only lower case letters.","","Output:","For each test case, print the answer to the given problem.","","Constraints:","1 <= T <= 10","1 <= |S| <= 30","","Sample Input(Plaintext Link)"," 3","abb","aaab","ababa","Sample Output(Plaintext Link)"," ab","ab","ababa"],"id":33}],[{"start":{"row":23,"column":5},"end":{"row":23,"column":6},"action":"insert","lines":[" "],"id":34}],[{"start":{"row":23,"column":6},"end":{"row":23,"column":7},"action":"insert","lines":["*"],"id":35}],[{"start":{"row":23,"column":7},"end":{"row":23,"column":8},"action":"insert","lines":["/"],"id":36}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["/"],"id":37}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["8"],"id":38}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":[" "],"id":39}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"remove","lines":[" "],"id":40}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"remove","lines":["8"],"id":41}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["*"],"id":42}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":[" "],"id":43}]]},"ace":{"folds":[],"scrolltop":362,"scrollleft":0,"selection":{"start":{"row":0,"column":3},"end":{"row":0,"column":3},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":18,"state":"comment","mode":"ace/mode/c_cpp"}},"timestamp":1448980322327}