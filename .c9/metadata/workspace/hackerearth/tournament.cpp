{"filter":false,"title":"tournament.cpp","tooltip":"/hackerearth/tournament.cpp","undoManager":{"mark":11,"position":11,"stack":[[{"start":{"row":0,"column":0},"end":{"row":49,"column":0},"action":"insert","lines":["#include <iostream>","#include <map>","#include <string>","#include <vector>","using namespace std;","","int main()","{","    int N, tempval = -1, c = 0;","    string tempkey;","    map<string, int> mymap;","    vector <string> myvec;","    cin >> N;","    while(N--)","    {","    \tstring s1, s2;","    \tcin >> s1 >> s2;","    \tif(mymap[s1])","    \tmymap[s1]++;","    \telse","    \tmymap[s1] = 1;","    \t","    \tif(mymap[s2])","    \tmymap[s2]++;","    \telse","    \tmymap[s2] = 1;","    }","    ","    for (map<string,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)","    {","    \tif(it->second > tempval)","    \t{","    \t\ttempkey = it->first;","    \t\ttempval = it->second;","    \t}","    }","    ","    for (map<string,int>::iterator it=mymap.begin(); it!=mymap.end(); ++it)","    {","    \tif(it->second == tempval)","    \t{","    \t\t myvec.push_back(it->first);","    \t}","    }","    cout << myvec.size() << endl;","    for(int i = 0; i < myvec.size(); i++)","    cout << myvec[i] << endl;","    ","}",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":1,"column":0},"action":"insert","lines":["",""],"id":2}],[{"start":{"row":1,"column":0},"end":{"row":2,"column":0},"action":"insert","lines":["",""],"id":3}],[{"start":{"row":0,"column":0},"end":{"row":0,"column":1},"action":"insert","lines":["/"],"id":4}],[{"start":{"row":0,"column":1},"end":{"row":0,"column":2},"action":"insert","lines":["*"],"id":5}],[{"start":{"row":0,"column":2},"end":{"row":0,"column":3},"action":"insert","lines":[" "],"id":6}],[{"start":{"row":0,"column":3},"end":{"row":0,"column":78},"action":"insert","lines":["https://www.hackerearth.com/problem/algorithm/tournament-easy/description/#"],"id":7}],[{"start":{"row":0,"column":78},"end":{"row":0,"column":79},"action":"insert","lines":[" "],"id":8}],[{"start":{"row":0,"column":79},"end":{"row":0,"column":80},"action":"insert","lines":["8"],"id":9}],[{"start":{"row":0,"column":79},"end":{"row":0,"column":80},"action":"remove","lines":["8"],"id":10}],[{"start":{"row":0,"column":79},"end":{"row":0,"column":80},"action":"insert","lines":["*"],"id":11}],[{"start":{"row":0,"column":80},"end":{"row":0,"column":81},"action":"insert","lines":["/"],"id":12}]]},"ace":{"folds":[],"scrolltop":120,"scrollleft":0,"selection":{"start":{"row":0,"column":81},"end":{"row":0,"column":81},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":5,"state":"start","mode":"ace/mode/c_cpp"}},"timestamp":1457001548967,"hash":"379830b448b6214a988391ff09aaadeb5c04cd71"}