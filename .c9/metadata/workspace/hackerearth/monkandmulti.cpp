{"filter":false,"title":"monkandmulti.cpp","tooltip":"/hackerearth/monkandmulti.cpp","undoManager":{"mark":2,"position":2,"stack":[[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"insert","lines":["#include <iostream>","using namespace std;","","int largest;","","void max_heapify (int Arr[ ], int i, int N)","{","    int left = 2*i;                   //left child","    int right = 2*i +1;           //right child","    if(left<= N && Arr[left] > Arr[i])","          largest = left;","    else","         largest = i;","    if(right <= N && Arr[right] > Arr[largest])","        largest = right;","    if(largest != i )","    {","        swap(Arr[i] , Arr[largest]);","        max_heapify(Arr, largest,N);","    } ","}","","","int main()","{","    int N;","    cin >> N;","    int Arr[N+1];","    for(int i = 1; i <= N; i++)","    {","    \tint input;","    \tcin >> input;","    \tArr[i] = input;","    \tmax_heapify(Arr, 1, i);","    \tfor(int j = 1; j <= i; j++)","    \t{","    \t\tcout << Arr[j] << \" \";","    \t}","    \tcout << endl;","    \tif(i < 3)","    \tcout << \"-1\" << endl;","    \telse","    \tcout << Arr[i]*Arr[i-1]*Arr[i-2] << endl;","    }","}",""],"id":1}],[{"start":{"row":0,"column":0},"end":{"row":45,"column":0},"action":"remove","lines":["#include <iostream>","using namespace std;","","int largest;","","void max_heapify (int Arr[ ], int i, int N)","{","    int left = 2*i;                   //left child","    int right = 2*i +1;           //right child","    if(left<= N && Arr[left] > Arr[i])","          largest = left;","    else","         largest = i;","    if(right <= N && Arr[right] > Arr[largest])","        largest = right;","    if(largest != i )","    {","        swap(Arr[i] , Arr[largest]);","        max_heapify(Arr, largest,N);","    } ","}","","","int main()","{","    int N;","    cin >> N;","    int Arr[N+1];","    for(int i = 1; i <= N; i++)","    {","    \tint input;","    \tcin >> input;","    \tArr[i] = input;","    \tmax_heapify(Arr, 1, i);","    \tfor(int j = 1; j <= i; j++)","    \t{","    \t\tcout << Arr[j] << \" \";","    \t}","    \tcout << endl;","    \tif(i < 3)","    \tcout << \"-1\" << endl;","    \telse","    \tcout << Arr[i]*Arr[i-1]*Arr[i-2] << endl;","    }","}",""],"id":2}],[{"start":{"row":0,"column":0},"end":{"row":31,"column":0},"action":"insert","lines":["#include <iostream>","#include <queue>","using namespace std;","","int main()","{","    int N, i = 0;","    cin >> N;","    priority_queue<long long int> mypq;","    while(N--)","    {","    \tint input;","    \tcin >> input;","    \tmypq.push(input);","    \t","    \tif( i < 2)","    \tcout << \"-1\" << endl;","    \telse","    \t{","    \t\tlong long int x = mypq.top();","    \t\tmypq.pop();","    \t\tlong long int y = mypq.top();","    \t\tmypq.pop();","    \t\tlong long int z = mypq.top();","    \t\tmypq.push(y);","    \t\tmypq.push(x);","    \t\tcout << x*y*z << endl;","    \t}","    \ti++;","    }","}",""],"id":3}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":31,"column":0},"end":{"row":31,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1456737850021,"hash":"e5dc5cf3734a1ff92e4309705170a3d5ae95eea1"}