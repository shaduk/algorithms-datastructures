{"filter":false,"title":"MergePointList.cpp","tooltip":"/hackerrank/DS/MergePointList.cpp","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":48,"column":0},"action":"insert","lines":["/*","   Find merge point of two linked lists","   Node is defined as","   struct Node","   {","       int data;","       Node* next;","   }","*/","int FindMergeNode(Node *headA, Node *headB)","{","    Node* ptrA = headA;","    Node* ptrB = headB;","    int lenA = 0, lenB = 0;","    while(ptrA != NULL)","        {","        lenA++;","        ptrA = ptrA->next;","    }","    ","    while(ptrB != NULL)","        {","        lenB++;","        ptrB = ptrB->next;","    }","    ","    ptrA = headA;","    ptrB = headB;","    ","    //now we adjust either ptrA or ptrB so that they are equally far from the end","    while(lenA > lenB){","        ptrA = ptrA->next;","        lenA--;","    }","    while(lenB > lenA){","        ptrB = ptrB->next;","        lenB--;","    }","","    while(ptrA != NULL)","        {","        if (ptrA == ptrB)","            return ptrA->data; //found merge point","        ptrA = ptrA->next;","        ptrB = ptrB->next;","    }","    return 0;","}",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":48,"column":0},"end":{"row":48,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1460378290448,"hash":"8a3d4f8cb41a34997f7e7d73165ba7b5d87426ee"}