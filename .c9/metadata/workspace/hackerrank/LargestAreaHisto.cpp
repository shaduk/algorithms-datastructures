{"filter":false,"title":"LargestAreaHisto.cpp","tooltip":"/hackerrank/LargestAreaHisto.cpp","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":44,"column":0},"action":"insert","lines":["#include <cmath>","#include <cstdio>","#include <stack>","#include <vector>","#include <iostream>","#include <algorithm>","using namespace std;","","","int main() {","     int N, maxArea = 0, currArea = 0, top = 0, j = 0;","    stack <int> mystack;","    cin >> N;","    int Arr[N], i = 0;","    for(int j = 0; j < N; j++)","        {","        int input;","        cin >> input;","        Arr[j] = input;","    }","    while(i < N)","        {","        if(mystack.empty() || Arr[mystack.top()] <= Arr[i])","            mystack.push(i++);","        else","            {","            top = mystack.top();","            mystack.pop();","            currArea = Arr[top]*(mystack.empty() ? i : i-mystack.top()-1);","            if(maxArea < currArea)","                maxArea = currArea;","        }","    }","    while(!mystack.empty())","            {","            top = mystack.top();","            mystack.pop();","           currArea = Arr[top]*(mystack.empty() ? i : i-mystack.top()-1);","            if(maxArea < currArea)","                maxArea = currArea;","        }","    cout << maxArea;","    return 0;","}",""],"id":1}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":44,"column":0},"end":{"row":44,"column":0},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1461186540604,"hash":"e12293d5e6b9f37920ab4e8eb34cd14c4c82b7d6"}